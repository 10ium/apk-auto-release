name: Generic App Updater

on:
  schedule:
    - cron: '0 10 * * *' # هر روز ساعت 10 صبح UTC اجرا می‌شود
  workflow_dispatch: # امکان اجرای دستی

jobs:
  check_and_upload_apps:
    runs-on: ubuntu-latest
    permissions:
      contents: write # برای ایجاد ریلیز، آپلود فایل‌ها و کامیت کردن فایل ردیابی

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # یک نسخه پایدار مثل 3.9 یا 3.10 هم خوب است

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 packaging selenium webdriver-manager

      - name: Set up Google Chrome and ChromeDriver
        run: |
          echo "Setting up Google Chrome..."
          sudo apt-get update -y
          sudo apt-get install -y wget gnupg
          # اضافه کردن کلید Google Chrome
          wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          # اضافه کردن ریپازیتوری Google Chrome
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update -y
          sudo apt-get install -y google-chrome-stable
          echo "Google Chrome Version:"
          google-chrome --version
          # webdriver-manager باید ChromeDriver را بر اساس نسخه نصب شده Chrome مدیریت کند.
          # اگر مشکلی بود، می توانید نسخه خاصی از ChromeDriver را دستی نصب کنید.
          echo "ChromeDriver will be managed by webdriver-manager in Python script."


      - name: Get Current Date
        id: date
        run: echo "TODAY=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Create tracking and URL files if not exists
        run: |
          touch versions_tracker.json
          touch urls_to_check.txt
          if [ ! -s versions_tracker.json ]; then echo "{}" > versions_tracker.json; fi

      - name: Run App Updater Script (using Selenium)
        id: app_check
        run: python scripts/app_updater.py

      - name: Process Updates and Create Releases
        # شرط برای اجرا: اسکریپت پایتون موفق بوده و تعداد آپدیت ها بیشتر از صفر است
        if: steps.app_check.outcome == 'success' && steps.app_check.outputs.updates_count > 0
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TODAY_DATE: ${{ steps.date.outputs.TODAY }}
        run: |
          echo "Processing updates found. Count: ${{ steps.app_check.outputs.updates_count }}"
          UPDATES_FILE="updates_found.json"
          TRACKER_FILE="versions_tracker.json"

          TEMP_TRACKER_FILE=$(mktemp)
          cp $TRACKER_FILE $TEMP_TRACKER_FILE

          # حلقه روی هر آپدیت پیدا شده در JSON
          jq -c '.[]' $UPDATES_FILE | while IFS= read -r update_item; do
            APP_NAME=$(echo "$update_item" | jq -r '.app_name')
            VERSION=$(echo "$update_item" | jq -r '.version')
            VARIANT=$(echo "$update_item" | jq -r '.variant')
            DOWNLOAD_URL=$(echo "$update_item" | jq -r '.download_url')
            PAGE_URL=$(echo "$update_item" | jq -r '.page_url')
            TRACKING_ID=$(echo "$update_item" | jq -r '.tracking_id')
            SUGGESTED_FILENAME=$(echo "$update_item" | jq -r '.suggested_filename')
            CURRENT_VERSION_FOR_TRACKING=$(echo "$update_item" | jq -r '.current_version_for_tracking')

            echo "Processing: $APP_NAME v$VERSION ($VARIANT)"

            DOWNLOADED_FILE_NAME="${SUGGESTED_FILENAME}"
            # ایجاد تگ ریلیز بر اساس نام برنامه، نوع و نسخه
            RELEASE_TAG_BASE=$(echo "${APP_NAME}_${VARIANT}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9_.-]/_/g' | sed 's/__*/_/g')
            RELEASE_TAG="${RELEASE_TAG_BASE}-v${VERSION}"
            RELEASE_TITLE="$APP_NAME v$VERSION ($VARIANT) - ${TODAY_DATE}"

            echo "  Downloading $DOWNLOADED_FILE_NAME from $DOWNLOAD_URL..."
            # استفاده از User-Agent در curl
            curl -L -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.102 Safari/537.36" -o "$DOWNLOADED_FILE_NAME" "$DOWNLOAD_URL"
            if [ $? -ne 0 ]; then
              echo "  [ERROR] Failed to download $DOWNLOADED_FILE_NAME. Skipping."
              continue # پرش به آپدیت بعدی
            fi
            echo "  Download complete: $DOWNLOADED_FILE_NAME"

            echo "  Checking for existing release: $RELEASE_TAG"
            if ! gh release view "$RELEASE_TAG" > /dev/null 2>&1; then
              echo "  Creating new release: $RELEASE_TAG"
              gh release create "$RELEASE_TAG" \
                "$DOWNLOADED_FILE_NAME" \
                --title "$RELEASE_TITLE" \
                --notes "New version of $APP_NAME ($VARIANT) found on $PAGE_URL. Checked on $TODAY_DATE."
              if [ $? -ne 0 ]; then
                echo "  [ERROR] Failed to create release $RELEASE_TAG. Asset might not be uploaded."
                rm -f "$DOWNLOADED_FILE_NAME" # پاک کردن فایل دانلود شده در صورت خطا
                continue # پرش به آپدیت بعدی
              fi
              echo "  Release $RELEASE_TAG created and $DOWNLOADED_FILE_NAME uploaded."
              # به‌روزرسانی فایل ردیابی موقت پس از موفقیت
              jq --arg id "$TRACKING_ID" --arg ver "$CURRENT_VERSION_FOR_TRACKING" '.[$id] = $ver' $TEMP_TRACKER_FILE > $TEMP_TRACKER_FILE.tmp && mv $TEMP_TRACKER_FILE.tmp $TEMP_TRACKER_FILE
            else
              echo "  Release $RELEASE_TAG already exists. Skipping upload."
              # حتی اگر ریلیز وجود داشته باشد، فایل ردیابی را به‌روز می‌کنیم
               jq --arg id "$TRACKING_ID" --arg ver "$CURRENT_VERSION_FOR_TRACKING" '.[$id] = $ver' $TEMP_TRACKER_FILE > $TEMP_TRACKER_FILE.tmp && mv $TEMP_TRACKER_FILE.tmp $TEMP_TRACKER_FILE
            fi
            rm -f "$DOWNLOADED_FILE_NAME" # پاک کردن فایل دانلود شده پس از پردازش
          done

          # جایگزینی فایل ردیابی اصلی با فایل موقت به‌روز شده
          mv $TEMP_TRACKER_FILE $TRACKER_FILE
          echo "Tracker file updated."

      - name: Commit Tracking File
        run: |
          git config --global user.name 'GitHub Action Bot'
          git config --global user.email 'actions@github.com'
          
          git add versions_tracker.json
          # فقط اگر فایل versions_tracker.json تغییر کرده باشد کامیت کن
          if ! git diff --staged --quiet versions_tracker.json; then
            echo "Committing changes to versions_tracker.json..."
            git commit -m "Update app versions tracker (${{ steps.date.outputs.TODAY }})"
            # تلاش برای پوش کردن با مدیریت خطای احتمالی
            for i in 1 2 3; do # تا 3 بار تلاش کن
              git push && break # اگر موفق بود، خارج شو
              echo "Push failed (attempt $i). Retrying in 10 seconds..."
              sleep 10
              # قبل از تلاش مجدد، تغییرات ریموت را بکشید تا از conflict جلوگیری شود
              # این بخش ممکن است نیاز به تنظیم دقیق تر داشته باشد
              git pull --rebase origin ${{ github.ref_name }} || echo "Pull rebase failed, continuing push attempt."
            done
          else
            echo "No changes in versions_tracker.json to commit."
          fi
        if: always() # این مرحله همیشه اجرا می شود تا بتواند تغییرات را کامیت کند یا بگوید تغییری نیست
