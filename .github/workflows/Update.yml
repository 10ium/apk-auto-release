name: Update InShot Release

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  update-inshot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Fetch latest APK URL
        id: fetch_url
        run: |
          PAGE_URL="https://www.farsroid.com/inshot-video-editor/"
          LATEST=$(curl -s "$PAGE_URL" \
            | grep -oE 'https://www\.dl\.farsroid\.com/ap/InShot-Pro-[0-9.]+\.apk' \
            | head -n1)
          echo "download_url=$LATEST" >> "$GITHUB_OUTPUT"

      - name: Parse version
        id: parse_ver
        run: |
          URL="${{ steps.fetch_url.outputs.download_url }}"
          VER=$(echo "$URL" | grep -oE '[0-9]+(\.[0-9]+)*')
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      - name: Get latest release info
        id: release_data
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const core = require('@actions/core');
            const { context, github } = require('@actions/github');
            let latest;
            try {
              latest = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
            } catch {
              latest = null;
            }
            if (!latest) {
              core.setOutput('tag', '');
              core.setOutput('size', '0');
            } else {
              const tag = latest.data.tag_name.replace(/^v/, '');
              const asset = latest.data.assets.find(a => a.name === 'InShot-Pro.apk');
              core.setOutput('tag', tag);
              core.setOutput('size', asset ? asset.size.toString() : '0');
            }

      - name: Validate download URL
        id: validate
        run: |
          URL="${{ steps.fetch_url.outputs.download_url }}"
          echo "Fetch URL: $URL"
          if [[ -z "$URL" ]]; then
            echo "⚠️ No APK URL found, exiting early."
            exit 0
          fi

      - name: Compare version and size
        id: compare
        run: |
          NEW_VER="${{ steps.parse_ver.outputs.version }}"
          OLD_VER="${{ steps.release_data.outputs.tag }}"
          OLD_SIZE="${{ steps.release_data.outputs.size }}"
          echo "New version: $NEW_VER, Old version: $OLD_VER, Old size: $OLD_SIZE"
          [[ -z "$NEW_VER" || "$NEW_VER" == "$OLD_VER" ]] && exit 0
          curl -L "$URL" -o InShot-Pro.apk
          NEW_SIZE=$(stat -c%s InShot-Pro.apk)
          [[ "$NEW_SIZE" -eq "$OLD_SIZE" ]] && exit 0

      - name: Create and upload release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.parse_ver.outputs.version }}"
          name: "InShot Pro v${{ steps.parse_ver.outputs.version }}"
          files: InShot-Pro.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
